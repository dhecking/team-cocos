{"version":3,"sources":["textureRenderUtils.js"],"names":["cc","Class","extends","Component","properties","camera","Camera","label","Label","_canvas","init","string","texture","RenderTexture","gl","game","_renderContext","initWithSize","visibleRect","width","height","STENCIL_INDEX8","targetTexture","createImg","dataURL","toDataURL","img","document","createElement","src","createCanvas","clearCanvas","ctx","getContext","render","data","readPixels","rowBytes","row","srow","imageData","createImageData","start","i","putImageData","showImage","Texture2D","initWithElement","spriteFrame","SpriteFrame","setTexture","node","Node","sprite","addComponent","Sprite","zIndex","macro","MAX_ZINDEX","parent","director","getScene","winSize","x","y","on","EventType","TOUCH_START","destroy","captureAction","capture","scaleAction","scaleTo","targetPos","v2","moveAction","moveTo","spawn","runAction","blinkAction","blink","clearRect"],"mappings":"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","file":"textureRenderUtils.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\cases\\07_capture_texture","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        camera: cc.Camera,\n        label: cc.Label,\n        _canvas: null\n    },\n\n    init () {\n        this.label.string = '';\n        let texture = new cc.RenderTexture();\n        let gl = cc.game._renderContext;\n        texture.initWithSize(cc.visibleRect.width, cc.visibleRect.height, gl.STENCIL_INDEX8);\n        this.camera.targetTexture = texture;\n        this.texture = texture;\n    },\n    // create the img element\n    createImg () {\n        // return the type and dataUrl\n        var dataURL = this._canvas.toDataURL(\"image/png\");\n        var img = document.createElement(\"img\");\n        img.src = dataURL;\n        return img;\n    },\n    // create the canvas and context, filpY the image Data\n    createCanvas () {\n        let width = this.texture.width;\n        let height = this.texture.height;\n        if (!this._canvas) {\n            this._canvas = document.createElement('canvas');\n\n            this._canvas.width = width;\n            this._canvas.height = height;\n        }\n        else {\n            this.clearCanvas();\n        }\n        let ctx = this._canvas.getContext('2d');\n        this.camera.render();\n        let data = this.texture.readPixels();\n        // write the render data\n        let rowBytes = width * 4; \n        for (let row = 0; row < height; row++) {\n            let srow = height - 1 - row;\n            let imageData = ctx.createImageData(width, 1);\n            let start = srow * width * 4;\n            for (let i = 0; i < rowBytes; i++) {\n                imageData.data[i] = data[start + i];\n            }\n\n            ctx.putImageData(imageData, 0, row);\n        }\n        return this._canvas;\n    },\n    \n    // show on the canvas\n    showImage (img) {\n        let texture = new cc.Texture2D();\n        texture.initWithElement(img);\n\n        let spriteFrame = new cc.SpriteFrame();\n        spriteFrame.setTexture(texture);\n\n        let node = new cc.Node();\n        let sprite = node.addComponent(cc.Sprite);\n        sprite.spriteFrame = spriteFrame;\n\n        node.zIndex = cc.macro.MAX_ZINDEX;\n        node.parent = cc.director.getScene();\n        // set position\n        let width = cc.winSize.width;\n        let height = cc.winSize.height;\n        node.x = width / 2;\n        node.y = height / 2;\n        node.on(cc.Node.EventType.TOUCH_START, () => {\n            node.parent = null;\n            this.label.string = '';\n            node.destroy();\n        });\n\n        this.captureAction(node, width, height);\n    },\n    // sprite action\n    captureAction (capture, width, height) {\n        let scaleAction = cc.scaleTo(1,0.3);\n        let targetPos = cc.v2(width - width / 6,  height / 4);\n        let moveAction = cc.moveTo(1, targetPos); \n        let spawn = cc.spawn(scaleAction, moveAction);\n        capture.runAction(spawn);\n        let blinkAction = cc.blink(0.1, 1);\n        // scene action\n        this.node.runAction(blinkAction);\n    },\n\n    clearCanvas () {\n        let ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n});\n"]}